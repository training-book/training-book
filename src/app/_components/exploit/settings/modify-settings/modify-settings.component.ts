import { NgIf } from '@angular/common';
import { Component, Input, OnInit } from '@angular/core';
import { AbstractControl, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { IonicModule, ModalController } from '@ionic/angular';
import Validation from 'src/app/_helpers/password.validation';
import { ToastMessageService } from 'src/app/_services/toast-message.service';
import { UserService } from 'src/app/_services/user.service';

@Component({
  selector: 'app-modify-settings',
  templateUrl: './modify-settings.component.html',
  styleUrls: ['./modify-settings.component.scss'],
  standalone: true,
  imports: [
    IonicModule,
    NgIf,
    FormsModule,
    ReactiveFormsModule,
  ]
})

export class ModifySettingsComponent implements OnInit {

  showLastPassword: boolean = false;
  showNewPassword: boolean = false;
  showConfirmNewPassword: boolean = false;
  @Input() params: any;
  passwordForm: FormGroup = new FormGroup(
    {
      lastPassword: new FormControl<string>('', [
        Validators.required,
        Validators.minLength(8),
        Validators.maxLength(32),
        Validators.pattern(Validation.upperLowerSymbolNumberRegex),
      ]),
      newPassword: new FormControl<string>('', [
        Validators.required,
        Validators.minLength(8),
        Validators.maxLength(32),
        Validators.pattern(Validation.upperLowerSymbolNumberRegex),
      ]),
      confirmNewPassword: new FormControl<string>('', [
        Validators.required,
      ]),
    },
    {
      validators : Validation.passwordMatch('newPassword', 'confirmNewPassword')
    }
  );
    constructor(private modalControl: ModalController, private userService:UserService,   private toastMessageService: ToastMessageService) { }

  ngOnInit() { }

  get formControls(): { [key: string]: AbstractControl } {
    return this.passwordForm.controls;
  }

  changePassword() {

    const {confirmNewPassword, ...lastAndNewPassword } = this.passwordForm.value; 
    console.log(this.passwordForm.value)
    this.userService.changePassword(lastAndNewPassword).subscribe({
      next: (success:any )=> {
        this.toastMessageService.presentToast('bottom', success.message, 'success' )
      },
      error : (error:any) => {
        this.toastMessageService.presentToast('bottom', error.error.message, 'danger' )
      },
      complete : ()=> {
        console.log('complete')
      }
    })
  }

  changeEmail() {
  }

  closeModal() {
    this.modalControl.dismiss({
      userAction: "back"
    })
  }
  
}
